#Google Docstring Parser Cases

Run in docstring_parser folder

$ python3 dsp.py tests/google_cases/add.py google
def add(x: int, y: int) -> int:
    """Adds two numbers.

    Args:
        x (int): The first number.
        y (int): The second number.

    Returns:
        int: The sum.
    """
    return x + y

*This is a class attribute annotation case
$ python3 dsp.py tests/google_cases/classann.py google
class Foo(object):
    """this a docstring

    Attributes:
        a (int):
        b (str):
        c (bool):
    """
    a: int
    b: str
    c: bool

    def __init__(self):
        pass

$ python3 dsp.py tests/google_cases/foo.py google
class Foo:

    def foo(a: int, b: str, c: bool) -> bool:
        """
        Args:
          a (int): ...
          b (str): ...
          c (bool): ...

        Returns:
          bool: True if successful, False otherwise.
        """
        pass

$ python3 dsp.py tests/google_cases/gg_vehicles.py google
class Vehicles(object):
    """
    The Vehicle object contains a lot of vehicles

    Args:
        arg (str): The arg is used for...
        *args: The variable arguments are used for...
        **kwargs: The keyword arguments are used for...

    Attributes:
        arg (str): This is where we store arg,
    """
    arg: str

    def __init__(self, arg, *args, **kwargs):
        self.arg = arg

    def cars(self, distance: int, destination: bool) -> cars:
        """We can't travel distance in vehicles without fuels, so here is the fuels

        Args:
            distance (int): The amount of distance traveled
            destination (bool): Should the fuels refilled to cover the distance?

        Raises:
            RuntimeError: Out of fuel

        Returns:
            cars: A car mileage
        """
        pass

$ python3 dsp.py tests/google_cases/google.py google
def function_name(parameter1: type, parameter2: type) -> type:
    """
    This is a brief summary of the function.

    Args:
        parameter1 (type): Description of parameter1.
        parameter2 (type): Description of parameter2.

    Returns:
        type: Description of the return value.

    Raises:
        ExceptionType: Description of the exception raised.
    """
    pass

$ python3 dsp.py tests/google_cases/multiline.py google
def complex(real: float=0.0, imag: float=0.0) -> bool:
    """
    Args:
      real (float): ...
      imag (float): ...

    Returns:
       bool: ....
    """
    if imag == 0.0 and real == 0.0:
        return complex_zero
    ...

